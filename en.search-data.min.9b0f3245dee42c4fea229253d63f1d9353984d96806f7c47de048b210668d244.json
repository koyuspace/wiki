[{"id":0,"href":"/docs/events/","title":"Events","section":"Docs","content":"Events #   "},{"id":1,"href":"/docs/verification/","title":"How can I get verified","section":"Docs","content":"How can I get verified #  Short answer: you can\u0026rsquo;t.\nWhy? #  The verification symbol you might see is just a custom emoji everyone can use. If you want to get actually \u0026ldquo;verified\u0026rdquo; you can verify a website you own and people already trust.\nHow do I verify my website then? #  Any link (including \u0026lt;link\u0026gt; tags) that have the rel=\u0026quot;me\u0026quot; attribute and link back to your profile are considered as a proof and should turn green once you link it back in your profile fields as well.\n"},{"id":2,"href":"/docs/streaming/","title":"Livestreaming on koyu.space","section":"Docs","content":"Livestreaming on koyu.space #  koyu.space got a livestreaming server available at stream.koyu.space. Staff members can stream their favourite content to as long as they edit the schedule accordingly.\nGetting started #  If you\u0026rsquo;re an admin or moderator for more than 90 days you can kindly ask koyu to give you the credentials to the streaming server.\nAccess #  Admin dashboard #  The admin dashboard can be accessed here.\nStreaming keys #  Credentials #  The credentials are the following:\nStream URL: rtmp://stream.koyu.space/live/ Streaming key: \u0026lt;The key you got from koyu\u0026gt; Configuring OBS Studio #  You can use the auto-configuration wizard from OBS Studio to properly configure koyu.space Stream for streaming. If you notice frame drops or connection errors please properly configure the bitrate.\n"},{"id":3,"href":"/docs/selfhost/","title":"Self-hosting","section":"Docs","content":"Self-hosting koyu.space #  Why would you want to run your own koyu.space server? #   Absolute control over your own voice on the web, not subject to anyone else\u0026rsquo;s rules or whims. Your server is your property, with your rules. It will exist as long as you want it to exist. You are not isolated on your own server. You can follow anyone on any other server, and they can follow you and you can exchange messages just like if you were on the same server. You can either limit sign-ups to be the only one on the server and run it like personal (micro)blog, maintain an invite-only community for family or friends or run a server anyone can sign up on, it\u0026rsquo;s up to you!  Please mind that providing a public internet service involves moderation work and community management, and that such work becomes more complicated the larger your server grows.  So you want to run your own koyu.space server #  Here is what you need:\n  A domain name. This is how you and others will access your server and how you and your users will be identified on the network.\nHow to get: Namecheap, Gandi, any of the infinite number of domain name registrars. Comes with a yearly cost that varies depending on domain name choice.\n  A VPS. Something that will run the koyu.space code that will always be connected to the internet.\nHow to get: DigitalOcean, Hetzner, Exoscale, Scaleway, any of the infinite number of hosting providers. Comes with a monthly or yearly cost that varies depending on hardware specifications.\n  An e-mail provider. koyu.space needs to send confirmation links and various notifications through e-mail, and hosting your own SMTP server, while possible, is much more difficult to do reliably than to simply use a third-party provider.\nHow to get: Mailgun, SparkPost, Postmark, Sendgrid, any of the infinite number of e-mail hosting providers that expose a SMTP API. Comes with a monthly cost based on volume of e-mails sent.\n  Optional: Object storage provider. koyu.space can save files that you and your users upload on the hard disk drive of the VPS it runs on, however, the hard disk drive is usually not infinite and difficult to upgrade later. An object storage provider gives you practically infinite metered file storage.\nHow to get: Amazon S3, Exoscale, Wasabi, Google Cloud, anything that exposes either an S3-compatible or OpenStack Swift-compatible API. Comes with a monthly cost based on the amount of files stored as well as how often they are accessed.\n  That however does assume a single-machine setup. koyu.space scales quite well horizontally. If your needs outgrow the capacity of a single machine, koyu.space can be divided into multiple app servers, background workers, multiple Redis backends, PostgreSQL replicas.\nIf you\u0026rsquo;re interested in installing everything on your own, proceed reading.\nPre-requisites #   A machine running Ubuntu 20.04 or higher that you have root access to A domain name (or a subdomain) for the koyu.space server, e.g. example.com An e-mail delivery service or other SMTP server  You will be running the commands as root. If you aren’t already root, switch to root:\nSystem repositories #  Make sure curl is installed first:\nNode.js #  curl -sL https://deb.nodesource.com/setup_14.x | bash - Yarn #  curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - echo \u0026#34;deb https://dl.yarnpkg.com/debian/ stable main\u0026#34; | tee /etc/apt/sources.list.d/yarn.list System packages #  apt update apt install -y \\  imagemagick ffmpeg libpq-dev libxml2-dev libxslt1-dev file git-core \\  g++ libprotobuf-dev protobuf-compiler pkg-config nodejs gcc autoconf \\  bison build-essential libssl-dev libyaml-dev libreadline6-dev \\  zlib1g-dev libncurses5-dev libffi-dev libgdbm-dev \\  nginx redis-server redis-tools postgresql postgresql-contrib \\  certbot python3-certbot-nginx yarn libidn11-dev libicu-dev libjemalloc-dev Installing Ruby #  We will be using rbenv to manage Ruby versions, because it’s easier to get the right versions and to update once a newer release comes out. rbenv must be installed for a single Linux user, therefore, first we must create the user koyu.space will be running as:\nadduser --disabled-login mastodon We can then switch to the user:\nsu - mastodon And proceed to install rbenv and rbenv-build:\ngit clone https://github.com/rbenv/rbenv.git ~/.rbenv cd ~/.rbenv \u0026amp;\u0026amp; src/configure \u0026amp;\u0026amp; make -C src echo \u0026#39;export PATH=\u0026#34;$HOME/.rbenv/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc echo \u0026#39;eval \u0026#34;$(rbenv init -)\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc exec bash git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build Once this is done, we can install the correct Ruby version:\nRUBY_CONFIGURE_OPTS=--with-jemalloc rbenv install 3.0.3 rbenv global 3.0.3 We’ll also need to install bundler:\ngem install bundler --no-document Return to the root user:\nexit Setup #  Setting up PostgreSQL #  Performance configuration (optional) #  For optimal performance, you may use pgTune to generate an appropriate configuration and edit values in /etc/postgresql/9.6/main/postgresql.conf before restarting PostgreSQL with systemctl restart postgresql\nCreating a user #  You will need to create a PostgreSQL user that koyu.space could use. It is easiest to go with “ident” authentication in a simple setup, i.e. the PostgreSQL user does not have a separate password and can be used by the Linux user with the same username.\nOpen the prompt:\nsudo -u postgres psql In the prompt, execute:\nCREATE USER mastodon CREATEDB; \\q Done!\nSetting up koyu.space #  It is time to download the koyu.space code. Switch to the mastodon user:\nsu - mastodon Checking out the code #  Use git to download the latest stable release of koyu.space:\ngit clone https://github.com/koyuspace/mastodon --recurse-submodules live \u0026amp;\u0026amp; cd live Installing the last dependencies #  Now to install Ruby and JavaScript dependencies:\nbundle config deployment \u0026#39;true\u0026#39; bundle config without \u0026#39;development test\u0026#39; bundle install -j$(getconf _NPROCESSORS_ONLN) yarn install --pure-lockfile The two bundle config commands are only needed the first time you\u0026rsquo;re installing dependencies. If you\u0026rsquo;re going to be updating or re-installing dependencies later, just bundle install will be enough.  Generating a configuration #  Run the interactive setup wizard:\nRAILS_ENV=production bundle exec rake mastodon:setup This will:\n Create a configuration file Run asset precompilation Create the database schema  The configuration file is saved as .env.production. You can review and edit it to your liking. Refer to the sample configuration file.\nYou’re done with the mastodon user for now, so switch back to root:\nexit Setting up nginx #  Copy the configuration template for nginx from the koyu.space directory:\ncp /home/mastodon/live/dist/nginx.conf /etc/nginx/sites-available/mastodon ln -s /etc/nginx/sites-available/mastodon /etc/nginx/sites-enabled/mastodon Then edit /etc/nginx/sites-available/mastodon to replace example.com with your own domain name, and make any other adjustments you might need.\nReload nginx for the changes to take effect:\nAcquiring a SSL certificate #  We’ll use Let’s Encrypt to get a free SSL certificate:\ncertbot --nginx -d example.com This will obtain the certificate, automatically update /etc/nginx/sites-available/mastodon to use the new certificate, and reload nginx for the changes to take effect.\nAt this point you should be able to visit your domain in the browser and see the melting koyu.space icon error page. This is because we haven’t started the koyu.space process yet.\nSetting up systemd services #  Copy the systemd service templates from the koyu.space directory:\ncp /home/mastodon/live/dist/mastodon-*.service /etc/systemd/system/ If you deviated from the defaults at any point, check that the username and paths are correct:\n$EDITOR /etc/systemd/system/mastodon-*.service Finally, start and enable the new systemd services:\nsystemctl daemon-reload systemctl enable --now mastodon-web mastodon-sidekiq mastodon-streaming They will now automatically start at boot.\nHurray! This is it. You can visit your domain in the browser now!  "},{"id":4,"href":"/docs/services/","title":"Services","section":"Docs","content":"Services #  We currently got the following services:\n koyu.space koyu.space Nitter koyu.space Gemini GemProxy Nordcast koyu.space TF2  \nServices with closed registrations are request-only due to limited resources.\nWe also offer free subdomains for users on koyu.space! Just e-mail us your A record or CNAME record along with your preffered subdomain and we will handle the rest. Please note that we don\u0026rsquo;t take any responsibility for user subdomains except limited by law.\nWebhosting #  Webhosting (static content only) is available for koyu.space members which means:\n You are more than 90 days on the server You either donated more than once or gained moderator/admin privileges You are in the Telegram group or on IRC  What you get:\n FTP access to your own webspace Your own subdomain A colored name on koyu.space  Rules:\n Fair use No illegal content  How to get:\nE-Mail support@koyu.space and we\u0026rsquo;ll sort out your request.\nChat #  We\u0026rsquo;re also chatting over Telegram and Libera.chat (#koyu). Matrix users can use the Libera.chat IRC bridge to connect. Note that these channels are public and not meant for sensitive topics or support. Please use support@koyu.space if you have questions regarding your account or file a complaint if you received a strike using your account.\nAnnouncements #  Announcements are made through our Telegram channel, uptime page or the announcement function inside koyu.space.\n"},{"id":5,"href":"/docs/dev/","title":"Setting up a dev environment","section":"Docs","content":"Setting up a dev environment #  Pre-requisites #   A machine running Ubuntu 20.04 or later that you have root access to  System repositorie #  Node.js #  curl -sL https://deb.nodesource.com/setup_12.x | sudo bash - Yarn #  curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo \u0026#34;deb https://dl.yarnpkg.com/debian/ stable main\u0026#34; | sudo tee /etc/apt/sources.list.d/yarn.list System packages #  sudo apt update sudo apt install -y \\  imagemagick ffmpeg libpq-dev libxml2-dev libxslt1-dev file git-core \\  g++ libprotobuf-dev protobuf-compiler pkg-config nodejs gcc autoconf \\  bison build-essential libssl-dev libyaml-dev libreadline6-dev \\  zlib1g-dev libncurses5-dev libffi-dev libgdbm-dev \\  redis-server redis-tools postgresql postgresql-contrib \\  yarn libidn11-dev libicu-dev libjemalloc-dev Installing Ruby #  We will be using rbenv to manage Ruby versions, because it’s easier to get the right versions and to update once a newer release comes out.\ngit clone https://github.com/rbenv/rbenv.git ~/.rbenv cd ~/.rbenv \u0026amp;\u0026amp; src/configure \u0026amp;\u0026amp; make -C src echo \u0026#39;export PATH=\u0026#34;$HOME/.rbenv/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc echo \u0026#39;eval \u0026#34;$(rbenv init -)\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc exec bash git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build Once this is done, we can install the correct Ruby version:\nRUBY_CONFIGURE_OPTS=--with-jemalloc rbenv install 3.0.3 rbenv global 3.0.3 We’ll also need to install bundler:\ngem install bundler --no-document Setup #  Run following commands in the project directory bundle install, yarn install.\nIn the development environment, koyu.space will use PostgreSQL as the currently signed-in Linux user using the ident method, which usually works out of the box. The one command you need to run is rails db:setup which will create the databases mastodon_development and mastodon_test, load the schema into them, and then create seed data defined in db/seed.rb in mastodon_development. The only seed data is an admin account with the credentials admin@localhost:3000 / mastodonadmin.\n Please keep in mind, by default koyu.space will run on port 3000. If you configure a different port for it, the generated admin account will use that number.\n If rails db:setup gives you the Postgres error:\nActiveRecord::NoDatabaseError: FATAL: role \u0026quot;your_user_name\u0026quot; does not exist  (where your_user_name is your username), then run:\nsudo -u postgres createuser your_user_name --createdb  This will create the necessary Postgres user with the permission to create a database.\nRunning #  There are multiple processes that need to be run for the full set of koyu.space functionality, although they can be selectively omitted. To run all of them with just one command, you can install Foreman with gem install foreman --no-document and then use:\nforeman start In the koyu.space directory. This will start processes defined in Procfile.dev, which will give you: A Rails server, a Webpack server, a streaming API server, and Sidekiq. Of course, you can run any of those things stand-alone depending on your needs.\nTesting #     Command Description     rspec Run the Ruby test suite   yarn run test Run the JavaScript test suite   rubocop Check the Ruby code for conformance with our code style    "}]